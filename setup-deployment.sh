#!/usr/bin/env bash
# River City Invitational - Deployment Setup Script
# This script helps configure the deployment for your specific server environment

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Function to detect current system
detect_system() {
    log_info "Detecting system configuration..."
    
    # Detect OS
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        echo "OS: $NAME $VERSION_ID"
    fi
    
    # Detect web server
    if systemctl is-active --quiet nginx 2>/dev/null; then
        WEB_SERVER="nginx"
        WEB_USER="nginx"
        WEB_GROUP="nginx"
    elif systemctl is-active --quiet apache2 2>/dev/null; then
        WEB_SERVER="apache"
        WEB_USER="www-data"
        WEB_GROUP="www-data"
    elif systemctl is-active --quiet caddy 2>/dev/null; then
        WEB_SERVER="caddy"
        WEB_USER="www-data"
        WEB_GROUP="www-data"
    else
        WEB_SERVER="none"
        WEB_USER="www-data"
        WEB_GROUP="www-data"
    fi
    
    echo "Web Server: $WEB_SERVER"
    echo "Suggested Web User: $WEB_USER"
    echo ""
}

# Function to get user input with default
get_input() {
    local prompt="$1"
    local default="$2"
    local var_name="$3"
    
    if [[ -n "$default" ]]; then
        read -p "$prompt [$default]: " input
        eval "$var_name=\"\${input:-$default}\""
    else
        read -p "$prompt: " input
        eval "$var_name=\"$input\""
    fi
}

# Function to create configuration file
create_config() {
    log_info "Creating deployment configuration..."
    
    # Get current directory
    PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    
    # Detect system first
    detect_system
    
    # Get configuration from user
    echo "Please provide the following configuration:"
    echo ""
    
    get_input "Domain name" "rivercity.michiganesports.org" DOMAIN
    get_input "Email for SSL certificates" "info@mihsef.org" EMAIL
    get_input "Web root directory" "/var/www/rivercity" WEB_ROOT
    get_input "Web server user" "$WEB_USER" WEB_USER
    get_input "Web server group" "$WEB_GROUP" WEB_GROUP
    get_input "Git branch" "main" GIT_BRANCH
    
    # Create the configuration file
    cat > "${PROJECT_DIR}/deploy-config.sh" << EOF
#!/usr/bin/env bash
# River City Invitational - Deployment Configuration
# Auto-generated by setup-deployment.sh on $(date)

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================

# Project and deployment paths
export PROJECT_DIR="$(cd "$(dirname "\${BASH_SOURCE[0]}")" && pwd)"
export SITE_BUILD_DIR="\${PROJECT_DIR}/site"
export WEB_ROOT="$WEB_ROOT"

# Caddy configuration
export CADDY_CONFIG_DIR="/etc/caddy"
export CADDY_CONFIG_FILE="\${CADDY_CONFIG_DIR}/Caddyfile"

# Domain and SSL configuration
export DOMAIN="$DOMAIN"
export EMAIL="$EMAIL"

# Web server user (adjust based on your server setup)
export WEB_USER="$WEB_USER"
export WEB_GROUP="$WEB_GROUP"

# Virtual environment location (relative to project)
export VENV_DIR="\${PROJECT_DIR}/.venv"

# Git repository settings
export GIT_BRANCH="$GIT_BRANCH"

# =============================================================================
# OPTIONAL CUSTOMIZATIONS
# =============================================================================

# Additional Caddy modules (if needed)
export CADDY_MODULES=""

# Custom build options
export MKDOCS_BUILD_OPTIONS="--clean"

# Backup settings
export BACKUP_DIR="/var/backups/rivercity"
export BACKUP_RETENTION_DAYS="30"

# Log settings
export LOG_LEVEL="info"
export LOG_RETENTION_DAYS="7"

# =============================================================================
# VALIDATION FUNCTIONS
# =============================================================================

# Function to validate configuration
validate_config() {
    local errors=0
    
    # Check required directories
    if [[ ! -d "\$(dirname "\$WEB_ROOT")" ]]; then
        echo "‚ùå Error: Web root parent directory \$(dirname "\$WEB_ROOT") does not exist"
        ((errors++))
    fi
    
    # Check if domain is set
    if [[ -z "\$DOMAIN" || "\$DOMAIN" == "your-domain.com" ]]; then
        echo "‚ùå Error: DOMAIN must be set to your actual domain"
        ((errors++))
    fi
    
    # Check if email is set
    if [[ -z "\$EMAIL" || "\$EMAIL" == "your-email@example.com" ]]; then
        echo "‚ùå Error: EMAIL must be set for SSL certificate registration"
        ((errors++))
    fi
    
    # Check web user exists
    if ! id "\$WEB_USER" &>/dev/null; then
        echo "‚ùå Warning: Web user '\$WEB_USER' does not exist on this system"
        echo "   Available users: \$(cut -d: -f1 /etc/passwd | grep -E '^(www-data|nginx|apache|http)' | tr '\n' ' ')"
    fi
    
    if [[ \$errors -gt 0 ]]; then
        echo ""
        echo "Please update the configuration in deploy-config.sh before running deployment"
        exit 1
    fi
    
    echo "‚úÖ Configuration validation passed"
}

# Function to detect system type and adjust configuration
detect_system() {
    # Detect Linux distribution
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        export OS_NAME="\$NAME"
        export OS_VERSION="\$VERSION_ID"
    else
        export OS_NAME="Unknown"
        export OS_VERSION="Unknown"
    fi
    
    # Detect web server
    if systemctl is-active --quiet nginx; then
        export WEB_SERVER="nginx"
        export WEB_USER="nginx"
        export WEB_GROUP="nginx"
    elif systemctl is-active --quiet apache2; then
        export WEB_SERVER="apache"
        export WEB_USER="www-data"
        export WEB_GROUP="www-data"
    elif systemctl is-active --quiet caddy; then
        export WEB_SERVER="caddy"
    else
        export WEB_SERVER="none"
    fi
    
    echo "üîç Detected system: \$OS_NAME \$OS_VERSION"
    echo "üîç Web server: \$WEB_SERVER"
}

# Function to show current configuration
show_config() {
    echo "üìã Current Deployment Configuration"
    echo "=================================="
    echo "Project Directory: \$PROJECT_DIR"
    echo "Site Build Dir:    \$SITE_BUILD_DIR"
    echo "Web Root:          \$WEB_ROOT"
    echo "Domain:            \$DOMAIN"
    echo "Email:             \$EMAIL"
    echo "Web User:          \$WEB_USER"
    echo "Web Group:         \$WEB_GROUP"
    echo "Git Branch:        \$GIT_BRANCH"
    echo "Virtual Env:       \$VENV_DIR"
    echo ""
}

# Load configuration on script execution
if [[ "\${BASH_SOURCE[0]}" == "\${0}" ]]; then
    # Script is being executed directly
    show_config
    detect_system
    validate_config
else
    # Script is being sourced
    detect_system
fi
EOF
    
    chmod +x "${PROJECT_DIR}/deploy-config.sh"
    log_success "Configuration file created: ${PROJECT_DIR}/deploy-config.sh"
}

# Function to test configuration
test_config() {
    log_info "Testing configuration..."
    
    # Source the configuration
    source deploy-config.sh
    
    # Run validation
    validate_config
    
    log_success "Configuration test passed!"
}

# Function to show next steps
show_next_steps() {
    echo ""
    log_success "üéâ Deployment setup completed!"
    echo ""
    echo "üìã Next steps:"
    echo "1. Review the configuration: cat deploy-config.sh"
    echo "2. Run full deployment: ./update-site.sh"
    echo "3. For quick updates: ./quick-update.sh"
    echo ""
    echo "üìö Documentation: cat DEPLOYMENT.md"
    echo ""
}

# Main function
main() {
    echo "üöÄ River City Invitational - Deployment Setup"
    echo "=============================================="
    echo ""
    
    # Check if config already exists
    if [[ -f "deploy-config.sh" ]]; then
        log_warning "deploy-config.sh already exists!"
        read -p "Do you want to recreate it? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_info "Using existing configuration..."
            test_config
            show_next_steps
            exit 0
        fi
    fi
    
    # Create configuration
    create_config
    
    # Test configuration
    test_config
    
    # Show next steps
    show_next_steps
}

# Run main function
main "$@"
